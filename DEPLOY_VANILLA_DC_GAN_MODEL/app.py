import streamlit as st
from PIL import Image
from pathlib import Path
import os
import numpy as np
import tensorflow as tf

# Set page config as the FIRST Streamlit command
st.set_page_config(layout="wide", page_title="GAN Image Generation")

# --- ADD THIS LINE FOR DEBUGGING ---
st.write(f"Using TensorFlow Version: {tf.__version__}")

# --- Configuration & Path Setup ---
BASE_DIR = Path(__file__).resolve().parent

# --- Real GAN Model Functions ---
@st.cache_resource
def load_gan_model(model_path):
    """
    Loads the Keras/TensorFlow model from the specified .h5 file.
    compile=False can help bypass errors from mismatched optimizer states.
    """
    try:
        # Using compile=False is a robust way to load models for inference
        model = tf.keras.models.load_model(str(model_path), compile=False)
        st.success(f"Model '{model_path.name}' loaded successfully.")
        return model
    except Exception as e:
        st.error(f"Error loading GAN model: {e}")
        return None

def generate_with_gan(model):
    """Generates an image using the loaded GAN model."""
    try:
        # Most GANs take a 100-dimensional noise vector as input.
        # If your model was trained with a different size, change 100 to that number.
        latent_dim = 100
        noise = np.random.randn(1, latent_dim)

        with st.spinner("Generating image..."):
            generated_image_array = model.predict(noise)
            # Post-process: remove batch dimension
            generated_image_array = generated_image_array[0]
            # Post-process: rescale pixel values from [-1, 1] to [0, 255]
            # If your GAN's last layer used 'sigmoid', use (generated_image_array * 255)
            image_array_processed = (generated_image_array * 127.5 + 127.5).astype(np.uint8)
            # Convert to displayable image
            image = Image.fromarray(image_array_processed)
            # Use the old 'use_column_width' parameter for streamlit v1.22.0
            st.image(image, caption="Generated by your GAN Model", use_column_width=True)
    except Exception as e:
        st.error(f"Error during GAN image generation: {e}")
        import traceback
        st.error(traceback.format_exc())

# --- Streamlit App UI ---
st.title("üé® GAN Image Generation Hub")
st.markdown("Welcome! Select a model from the sidebar to start generating images.")

# Sidebar for Model Selection
st.sidebar.header("‚öôÔ∏è Model Configuration")
model_choice = st.sidebar.selectbox(
    "Choose a Model:",
    ("--- Select ---", "Vanilla Generator", "DCGAN Generator")
)
st.sidebar.markdown("---")

# Main Content Area
if model_choice == "--- Select ---":
    st.info("üëà Select a model from the sidebar to get started!")

elif model_choice in ["Vanilla Generator", "DCGAN Generator"]:
    st.header(f"üñºÔ∏è {model_choice}")
    model_file_name = "Vanilla_Generator_epoch_0573.h5" if model_choice == "Vanilla Generator" else "DCGAN_generator_epoch_0210.h5"
    model_path = BASE_DIR / model_file_name

    # Load the selected GAN model (this will be cached)
    gan_model = load_gan_model(model_path)

    if gan_model:
        # Show the button only if the model was loaded successfully
        if st.button(f"Generate Image with {model_choice}", key=f"generate_{model_choice.replace(' ', '_')}"):
            generate_with_gan(gan_model)
    else:
        st.error(f"Cannot proceed because the model at {model_path} could not be loaded.")
